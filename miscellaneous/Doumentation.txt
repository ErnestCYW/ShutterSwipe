Version 1.0:
- Login feature with JWT authentication
- Frontend and backend setup
- Instructions to run:
    1) Install postgresSQL on your local machine and run a server on port 5432
    2) Create a database with name "shutterswipe" and change into that database
    3) Install uuid extension (CREATE EXTENSION IF NOT EXISTS "uuid-ossp") in database
    4) Follow table creation and dummy data insertion in ShutterSwipe/server/database.sql file
    5) To test backend
        5.1) Run "npm install" to get all dependencies
        5.2) Run "npm run dev" to start nodemon server to test backend
        5.3) Send responses / requests through Postman
    6) To test fullstack
        6.1) Run "npm install" in client to get all dependencies
        6.2) Run "npm start" in client to start frontend
        6.3) Run "npm install" in server to get all dependencies
        6.4) Run "npm run dev" in server to start backend
        6.5) Go to localhost on port 3000 to test

Version 1.1:
- Added upload photos feature with viewing photos
- Added CRUD operations on photos
- Basic display of photos in "Dashboard" 
- Basic routing
- Instructions to run:
    1) Follow instructions above
    2) Register & Login with account
    3) Upload photos and refresh the page

Version 1.2:
- Added profile traits feature with CRUD operations
- Added homepage
- Added navbar
- Instructions to run:
    1) Follow instructions above
    2) Use navbar to login / logout and navbar to navigate to homepage

Version 1.3:
- Prelimanary CSS styling using Bootstrap and SASS
- Added "Feed" to view other user's photos
- Added "like" and "dislike" feature for photos
- Implemented ranking algorithmn using photo score
- Implemented Cloud Vision API with image recognition capabilities *
- Instructions to run:
    1) Follow instructions above
    2) Query postgres database (labels table) to get the Cloud Vision API labels after upload
    3) Use the feed tab and "like" / "dislike" buttons to rank photos.
* Note that to access Cloud Vision API you need to have a APIKey.json file which contains a private key. Please contact us if you wish to try this out.

Version 2.1: 
- Added "Group" to connect and message other users. 
- Preliminary implementation of socket.io 

Version 2.2:
- CRUD operations on chat groups
- Chat history 
- User search and viewing of profiles 
- Added double password, improve authentication
- Improved profile features (username, description, traits)

Version 2.3
- Improved UI/UX
- Testing 
- Debugging
